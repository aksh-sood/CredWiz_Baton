pipeline {
  agent any
   
  options {
    buildDiscarder(logRotator(numToKeepStr: '2', artifactNumToKeepStr: '2',daysToKeepStr:'2',artifactDaysToKeepStr: '1'))
  }
  stages {
      
      stage('Fetch Code'){
          steps{
              git branch: 'vp-rem', url:'https://github.com/devopshydclub/vprofile-project.git'
          }
      }
      
    stage('Build') {
      steps {
        echo 'Demo Build Message'
        sh "mvn clean install -DskipTests"
      }
    
    }

    stage('Run Tests') {
          steps {
            echo 'Running Tests'
            sh 'mvn test'
          }
     
    }

    stage('checkstyle analysis'){
      steps{
        sh 'mvn checkstyle:checkstyle'
      }
    }

    stage('Sonar Analysis'){
      environment{
        scannerHome = tool 'sonar'
      }
      steps{
        withSonarQubeEnv('sonar'){
        sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=credwiz \
        -Dsonar.projectName=vprofile-repo \
        -Dsonar.projectVersion=1.0 \
        -Dsonar.sources=src/ \
        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
        -Dsonar.junit.reportsPath=target/jacoco.exec \
        -Dsonar.jacoco.reportspath=target/jacoco.exec \
        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
        '''
        }
      }
    }

    stage('quality gate'){
      steps{
        timeout(time:1, unit:'HOURS'){
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('Nexus upload'){
      steps{
     nexusArtifactUploader(
        nexusVersion: 'nexus3',
        protocol: 'http',
        nexusUrl: '54.163.50.237:8081',
        groupId: 'QA',
        version: '${env.BUILD_ID}-${env.BUILD_TIMESTAMP}',
        repository: 'RepositoryName',
        credentialsId: 'CredentialsId',
        artifacts: [
            [artifactId: projectName,
             classifier: '',
             file: 'my-service-' + version + '.jar',
             type: 'jar']
        ]
     )
      }
    }
  }
}
